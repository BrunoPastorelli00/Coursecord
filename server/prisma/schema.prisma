// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organisation {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String       @unique
  owner        User         @relation(name: "owner", fields: [owner_id], references: [id])
  owner_id     String       @db.ObjectId
  members      User[]       @relation(name: "members", fields: [members_ids], references: [id])
  members_ids  String[]     @db.ObjectId
  courses      Course[]     @relation
  course_units CourseUnit[] @relation
  roles        Role[]       @relation(name: "roles", fields: [role_ids], references: [id])
  role_ids     String[]     @db.ObjectId
}

model Role {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  permissions       String[]
  organisations     Organisation[] @relation(name: "roles", fields: [organisations_ids], references: [id])
  organisations_ids String[]       @db.ObjectId
  users             User[]         @relation(fields: [user_ids], references: [id])
  user_ids          String[]       @db.ObjectId
}

model User {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  email                String            @unique
  oauth_id             String            @unique
  oauth_provider       String
  image                String
  owner_of             Organisation[]    @relation(name: "owner")
  member_of            Organisation[]    @relation(name: "members", fields: [organisation_ids], references: [id])
  organisation_ids     String[]          @db.ObjectId
  roles                Role[]            @relation(fields: [role_ids], references: [id])
  role_ids             String[]          @db.ObjectId
  instructor_of        Course[]          @relation(name: "instructors", fields: [instructor_of_ids], references: [id])
  instructor_of_ids    String[]          @db.ObjectId
  student_of           Course[]          @relation(name: "students", fields: [student_of_ids], references: [id])
  student_of_ids       String[]          @db.ObjectId
  requests_created     HelpRequest[]     @relation(name: "help_requestors", fields: [requests_created_ids], references: [id])
  requests_created_ids String[]          @db.ObjectId
  requests_answered    HelpRequest[]     @relation(name: "help_answered")
  student_notes        StudentNotes[]    @relation
  student_feedback     StudentFeedback[] @relation
}

model Course {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  organisation    Organisation    @relation(fields: [organisation_id], references: [id])
  organisation_id String          @db.ObjectId
  instructors     User[]          @relation(name: "instructors", fields: [instructor_ids], references: [id])
  instructor_ids  String[]        @db.ObjectId
  students        User[]          @relation(name: "students", fields: [student_ids], references: [id])
  student_ids     String[]        @db.ObjectId
  syllabus        CourseSection[] @relation(name: "syllabus")
  help_requests   HelpRequest[]   @relation
}

model CourseSection {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  course_units CourseUnit[] @relation(name: "section_content", fields: [unit_ids], references: [id])
  unit_ids     String[]     @db.ObjectId
  course       Course       @relation(name: "syllabus", fields: [courseId], references: [id])
  courseId     String       @db.ObjectId
}

model CourseUnit {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  type            String
  markdown_body   String
  organisation    Organisation    @relation(fields: [organisation_id], references: [id])
  organisation_id String          @db.ObjectId
  section         CourseSection[] @relation(name: "section_content", fields: [section_ids], references: [id])
  section_ids     String[]        @db.ObjectId
}

model HelpRequest {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  course        Course   @relation(fields: [course_id], references: [id])
  course_id     String   @db.ObjectId
  students      User[]   @relation(name: "help_requestors", fields: [student_ids], references: [id])
  student_ids   String[] @db.ObjectId
  instructor    User     @relation(name: "help_answered", fields: [instructor_id], references: [id])
  instructor_id String   @db.ObjectId
  status        String   @default("WAITING")
  content       String
  created_at    DateTime @default(now())
  time_waiting  Int      @default(0)
  time_in_call  Int?
}

//Below is not part of MVP

model StudentNotes {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  student    User   @relation(fields: [student_id], references: [id])
  student_id String @db.ObjectId
  notes      String
}

model StudentFeedback {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  student    User   @relation(fields: [student_id], references: [id])
  student_id String @db.ObjectId
  assignment String //references CourseContent
  instructor String //references User
  content    String
}
